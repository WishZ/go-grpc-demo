syntax = "proto3";

package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "ToDo service";
    version: "1.0";
    contact: {
      name: "go-grpc-demo";
      url: "https://github.com/WishZ/go-grpc-demo";
      email: "wishzhang77@gmail.com";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};
//用于管理待办事项列表的服务
service ToDoService {
  //创建
  rpc Create (CreateRequest) returns (CreateResponse) {
    option(google.api.http) = {
      post:"/v1/todo"
      body:"*"
    };
  }

  //读取
  rpc Read(ReadRequest) returns (ReadResponse) {
    option(google.api.http) = {
      get:"/v1/todo/{id}"
    };
  }

  //更新
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option(google.api.http) = {
      put:"/v1/todo/{toDo.id}"
      body:"*"

      additional_bindings {
        patch: "/v1/todo/{toDo.id}"
        body: "*"
      }
    };
  }

  //删除
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/v1/todo/{id}"
    };
  }
  //读取所有
  rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
    option (google.api.http) = {
      get: "/v1/todo/all"
    };
  }
}
message CreateRequest {

  string api = 1;
  //任务实体
  ToDo toDo = 2;
}

message ToDo {
  int64 id = 1;
  string title = 2;
  string description = 3;
  google.protobuf.Timestamp reminder = 4;
}

message CreateResponse {
  string api = 1;
  //已创建任务的ID
  int64 id = 2;
}

message ReadRequest {
  string api = 1;
  int64  id = 2;
}

message ReadResponse {
  string api = 1;
  ToDo todo = 2;
}

message UpdateRequest{
  string api = 1;
  ToDo toDo = 2;
}

message UpdateResponse {
  string api = 1;
  //更新的数量
  int64 updated = 2;
}

message DeleteRequest {
  string api = 1;
  int64 id = 2;
}

message DeleteResponse {
  string api = 1;
  //删除的数量
  int64 deleted = 2;
}

// 请求数据以读取所有待办事项任务
message ReadAllRequest {
  // API版本控制：这是明确指定版本的最佳实践
  string api = 1;
}
// 包含所有待办事项任务的列表
message ReadAllResponse {
  // API版本控制：这是明确指定版本的最佳实践
  string api = 1;
  repeated ToDo toDos = 2;
}